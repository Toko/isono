# -*- coding: utf-8 -*-

module Isono
  module NodeModules
    class EventLogger < Base

      initialize_hook do
        amq.topic(EventChannel::AMQP_EXCHANGE, {:auto_delete=>true})

        amq.queue("event-logger.#{manifest.node_id}", {:exclusive=>true}).bind(
                    EventChannel::AMQP_EXCHANGE, {:key=>'*.*'}).subscribe { |data|
          data = Serializer.instance.unmarshal(data)
          next unless EventLogger.filter_event(data)
          
          DataStore.pass {
            Models::EventLog.create(:event=>data[:event],
                                    :sender=>data[:sender],
                                    :message=>data[:message].inspect,
                                    :publised_at=>data[:published_at])
          }
        }
      end

      terminate_hook do
        amq.queue("event-logger.#{manifest.node_id}").delete
      end

      private
      def self.filter_event(data)
        case data[:event]
        when 'node_collector/pong'
          return false
        end
        return true
      end
      
    end
  end
end
