# -*- coding: utf-8 -*-

module Isono
  module NodeModules
    class Base

      attr_reader :node

      def initialize(node)
        @node = node
        
        raise "Module initializer_hook is not run yet" if self.value_object.nil?
        value_object.copy_instance_variables(self)
      end
      
      # Delegate methods used in subclass frequently.
      def manifest
        node.manifest
      end

      def value_object
        node.value_objects[self.class]
      end

      # shortcut method to lookup configuration section only which
      # belongs to this class.
      def config_section
        node.manifest.config.send(self.class.instance_variable_get(:@config_section_name))
      end
      
      module ClassMethods
        def initialize_hook(&blk)
          @initialize_hook = blk if blk
          @initialize_hook
        end
        
        def terminate_hook(&blk)
          @terminate_hook = blk if blk
          @terminate_hook
        end

        def config_section(name=nil, &blk)
          @config_section_name = name unless name.nil? 
          @config_section_builder = blk
        end        
      end
      
      protected
      def self.inherited(klass)
        super
        klass.extend ClassMethods
        klass.class_eval {
          # set the default config section name from its class name.
          # can be overwritten later.
          @config_section_name = Util.snake_case(self.to_s.split('::').last)
        }
      end
      
    end
  end
end
