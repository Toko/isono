# -*- coding: utf-8 -*-

require 'thread'
require 'statemachine'
require 'ostruct'

module Isono
  module NodeModules
    class RpcChannel < Base
      include Logger

      AMQP_EXCHANGE='isono.rpc'

      initialize_hook do
        @active_requests = {}
        @endpoints = {}
        amq.direct(AMQP_EXCHANGE, {:auto_delete=>true})
        
        amq.queue("command-recv.#{manifest.node_id}", {:exclusive=>true}).subscribe { |header, data|
          event = EventChannel.new(self.node)
          req = @active_requests[header.message_id]
          if req
            data = Serializer.instance.unmarshal(data)
            req.process_event(:on_received, data)
            event.publish('rpc/response_received', :args=>[header.message_id])
            begin
              case data[:type]
              when :inprogress
                req.progress_cb.call(data[:msg]) if req.progress_cb
              when :error
                req.process_event(:on_error, data)
                req.error_cb.call(data[:msg]) if req.error_cb
              else
                req.process_event(:on_success, data)
                req.success_cb.call(data[:msg]) if req.success_cb
              end
            rescue => e
              logger.error(e)
            ensure
              if req.state == :done
                @active_requests.delete req.ticket
              end
            end
          end
        }

        # RPC endpoint for statistics info of this node.
        myinstance.register_endpoint("rpc-stats.#{manifest.node_id}", proc { |req, res|
                                       case req.command
                                       when 'get'
                                         res.response({:active_requests => @active_requests.map {|a| a.hash },
                                                        :endpoints => @endpoints.keys
                                                      })
                                       else
                                         raise Rack::UnknownMethodError
                                       end
                                     })
      end

      terminate_hook do
        @endpoints.keys.each { |ns|
          myinstance.unregister_endpoint(ns)
        }
        amq.queue("command-recv.#{manifest.node_id}", {:exclusive=>true}).delete
      end

      # Make a RPC request to an endpoint.
      # 
      # @param [String] endpoint
      # @param [String] command
      # @param [Array] args
      # @param [Proc] &blk Block to setup the request context.
      # @return [RequestContext,any]
      #
      # @example create a sync RPC request.
      #   rpc.request('endpoint1', 'func1', xxxx)
      # @example call RPC in async mode.
      #   rpc.request('endpoint1', 'func1', xxxx) { |req|
      #     req.on_success { |r|
      #       puts r
      #     }
      #     req.on_error { |r|
      #       puts r
      #     }
      #   }
      #
      # @example setup request context and do wait().
      #   Note that callbacks are 
      #   rpc.request('endpoint1', 'func1', xxxx) { |req|
      #     # send new attribute
      #     req.request[:xxxx] = "sdfsdf"
      #     # returns synchronized RequestContext to block caller.
      #     req.synchronize
      #   }.wait # request() get back the altered RequestCotenxt that has wait().
      #
      # @example Create async oneshot call. (do not expect response) 
      #   rpc.request('endpoint1', 'func1') { |req|
      #     req.oneshot = true
      #   }
      def request(endpoint, command, *args, &blk)
        req = RequestContext.new(endpoint, command, args)
        # the block is to setup the request context prior to sending.
        if blk
          r = blk.call(req)
          req = r if r.is_a?(RequestContext)
        else
          req = req.synchronize
        end
        
        send_request(req)

        if blk
          req
        else
          req.wait
        end
      end

      # @param [String] endpoint
      # @param [has call() method]  app
      def register_endpoint(endpoint, app)
        raise TypeError unless app.respond_to?(:call)
        @endpoints[endpoint]=app

        # create receive queue for new RPC endpoint.
        amq.queue(endpoint_queue_name(endpoint), {:exclusive=>true}).bind(
                     AMQP_EXCHANGE, {:key=>endpoint_queue_name(endpoint)}
                      ).subscribe(:ack=>true) { |header, data|

          data = Serializer.instance.unmarshal(data)
          event.publish('rpc/request_received', :args=>[header.message_id])

          resctx = if data[:oneshot]
                     OneshotResponseContext.new(self.node, header)
                   else
                     ResponseContext.new(self.node, header)
                   end
          begin
            ret = app.call(Rack::Request.new(data), resctx)
          rescue Exception => e
            logger.error(e)
            resctx.response(e) unless resctx.responded?
          end
        }
        event.publish('rpc/register', :args=>[endpoint])
      end
      

      def unregister_endpoint(endpoint)
        if @endpoints.delete(endpoint)
          amq.queue(endpoint_queue_name(endpoint), {:exclusive=>true}).delete
          event.publish('rpc/unregister', :args=>[endpoint])
        end
      end
      
      private
      def endpoint_queue_name(ns)
        "isono.rpc.endpoint.#{ns}"
      end

      def event
        @event ||= EventChannel.new(node)
      end

      # Publish a RPC request asynchronously.
      # @param [RequestContext] req Request context object to be
      # sent. If the context's state is not :init, it will fail.
      def send_request(req)
        raise TypeError if !req.is_a?(RequestContext)
        raise "Request context seems to be sent already: #{req.state}" if req.state != :init
        
        if req.timeout_sec > 0.0
          # register the timeout hook.
          req.timer = EventMachine::Timer.new(req.timeout_sec) {
            @active_requests.delete req.ticket
            req.error_cb.call(:timeout) if req.error_cb
          }
        end
        
        req.process_event(:on_ready)
        
        EventMachine.schedule {
          if !req.oneshot
            @active_requests[req.ticket] = req
          end
          
          amq.direct(AMQP_EXCHANGE).publish(
                  Serializer.instance.marshal(req.request_hash),
                  {:message_id => req.ticket,
                    :key => endpoint_queue_name(req.endpoint),
                    :reply_to=>"command-recv.#{manifest.node_id}"}
                  )
          req.process_event(:on_sent)
          event.publish('rpc/request_sent', :args=>[req.hash])
        }
      end

      class ResponseContext
        def initialize(node, header)
          @responded = false
          @node = node
          @header = header
        end

        def responded?
          @responded
        end

        def progress(ret)
          EM.schedule {
            publish(:inprogress, ret)
          }
        end

        def response(ret)
          raise "" if @responded

          EM.schedule {
            @header.ack
            if ret.is_a? Exception
              publish(:error, {:message=> ret.message, :error_type => ret.class.to_s})
            else
              publish(:success, ret)
            end
            EventChannel.new(@node).publish('rpc/response_sent', :args=>[@header.message_id])
          }
          @responded = true
        end


        private
        def publish(type, body)
          @node.amq.direct('').publish(Serializer.instance.marshal({:type=>type, :msg=>body}),
                                       {:key=>@header.reply_to,
                                         :message_id=>@header.message_id}
                                       )
        end
      end

      # Do nothing when the response is tried to send back in case of
      # oneshot request.
      class OneshotResponseContext < ResponseContext
        def progress(ret)
        end

        def response(ret)
          raise "" if @responded

          EM.schedule {
            @header.ack
            EventChannel.new(@node).publish('rpc/response_sent', :args=>[@header.message_id])
          }
          @responded = true
        end
      end

      class RequestContext < OpenStruct
        # They are not to be appeared in @table so that won't be inspect().
        attr_reader :error_cb, :success_cb, :progress_cb
        attr_accessor :timer

        def initialize(endpoint, command, args)
          super({:request=>{
                    :endpoint=> endpoint,
                    :command => command,
                    :args => args
                  },
                  :endpoint=> endpoint,
                  :command => command,
                  :ticket => Util.gen_id,
                  :timeout_sec => 0.0,
                  :oneshot => false,
                  :sent_at => nil,
                  :completed_at => nil,
                  :complete_status => nil,
                })
          
          @success_cb = nil
          @progress_cb = nil
          @error_cb = nil
          @timer = nil

          @stm = Statemachine.build {
            trans :init, :on_ready, :ready
            trans :ready, :on_sent, :waiting, proc {
              self.sent_at=Time.now
              # freeze request hash not to be modified after sending.
              self.request.freeze
            }
            trans :waiting, :on_received, :waiting
            trans :waiting, :on_error, :done, proc {
              self.completed_at=Time.now
              @timer.cancel if @timer
              self.complete_status = :fail
            }
            trans :waiting, :on_success, :done, proc {
              self.completed_at=Time.now
              @timer.cancel if @timer
              self.complete_status = :success
            }
          }
          @stm.context = self
        end

        def state
          @stm.state
        end

        def process_event(ev, *args)
          @stm.process_event(ev, *args)
        end

        def elapsed_time
          self.completed_at.nil? ? nil : (self.completed_at - self.sent_at)
        end

        def hash
          # state, sent_at received_at are readonly values so they are
          # not pushed in @table.
          @table.dup.merge({:state=>self.state})
        end

        def request_hash
          request.merge({:oneshot=>oneshot})
        end

        def on_success(&blk)
          raise ArgumentError unless blk
          @success_cb = blk
        end

        def on_progress(&blk)
          raise ArgumentError unless blk
          @progress_cb = blk
        end

        def on_error(&blk)
          raise ArgumentError unless blk
          @error_cb = blk
        end

        def synchronize
          self.extend RequestSynchronize
          self
        end

        module RequestSynchronize
          def self.extended(mod)
            raise TypeError, "This module is applicable only for RequestContext" unless mod.is_a?(RequestContext)
            # overwrite callbacks
            mod.instance_eval {
              @q = ::Queue.new
              
              on_success { |r|
                @q << [:success, r]
              }
              on_error { |r|
                @q << [:error, r]
              }
            }
          end

          public
          def wait()
            raise "response was received already." if state == :done
            raise "wait() has to be called at outside of the EventMachine's main loop." if EventMachine.reactor_thread?
            
            r = @q.deq
            
            case r[0]
            when :success
              r[1]
            when :error
              # TODO: raise Error if the response returns error class.
              r[1]
            end
          end
        end
        
      end
      
    end
  end
end
