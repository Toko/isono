# -*- coding: utf-8 -*-

module Isono
  module NodeModules
    class JobCollector < Base

      initialize_hook do
        rpc = RpcChannel.new(node)

        app = Rack::DataStore.new(Dispatch.new)
        
        rpc.register_endpoint('job-collector', app)
      end

      terminate_hook do
      end

      class Dispatch
        # Register new job
        def regist
          params = @req.args[0]
          params[:node_id]=@req.sender
          job =Models::JobState.new
          job.set_fields(params, [:job_id, :parent_job_id, :session_id, :node_id, :state, :job_name]).save
        end
        
        def update
          params = @req.args[0]
          job = Models::JobState.find(:job_id=>params[:job_id])
          raise "Unknown or JOB ID: #{params[:job_id]}" if job.nil?
          job.set_fields(params, [:state, :started_at, :finished_at]).save
        end

        def call(req, res)
          @req, @res = req, res
          raise Rack::UnknownMethodError if @req.command == 'call'
          m = self.method(@req.command)
          raise Rack::UnknownMethodError if m.nil?

          ret = m.call
          @res.response(nil)  if @res.responded?
        end
      end

    end
  end
end
